(function() {
  var FreeSwitchParser, debug, parse_header_text, querystring;

  querystring = require('querystring');

  exports.debug = false;

  if (exports.debug) {
    debug = function(o) {
      var util;
      util = require('util');
      return util.log(util.inspect(o));
    };
  }

  module.exports = FreeSwitchParser = (function() {
    function FreeSwitchParser(socket) {
      this.socket = socket;
      this.body_length = 0;
      this.buffer = "";
    }

    FreeSwitchParser.prototype.capture_body = function(data) {
      var body;
      this.buffer += data;
      if (this.buffer.length < this.body_length) {
        return;
      }
      body = this.buffer.substring(0, this.body_length);
      this.buffer = this.buffer.substring(this.body_length);
      this.body_length = 0;
      this.process(this.headers, body);
      this.headers = {};
      return this.capture_headers('');
    };

    FreeSwitchParser.prototype.capture_headers = function(data) {
      var header_end, header_text;
      this.buffer += data;
      header_end = this.buffer.indexOf("\n\n");
      if (header_end < 0) {
        return;
      }
      header_text = this.buffer.substring(0, header_end);
      this.buffer = this.buffer.substring(header_end + 2);
      this.headers = parse_header_text(header_text);
      if (this.headers["Content-Length"]) {
        this.body_length = this.headers["Content-Length"];
        return this.capture_body('');
      } else {
        this.process(this.headers);
        this.headers = {};
        return this.capture_headers('');
      }
    };

    FreeSwitchParser.prototype.on_data = function(data) {
      if (typeof debug === "function") {
        debug("on_data(" + data + ")");
      }
      if (this.body_length > 0) {
        return this.capture_body(data);
      } else {
        return this.capture_headers(data);
      }
    };

    FreeSwitchParser.prototype.on_end = function() {
      if (typeof debug === "function") {
        debug("Parser: end of stream");
      }
      if (this.buffer.length > 0) {
        return typeof debug === "function" ? debug("Buffer is not empty, left over: " + this.buffer) : void 0;
      }
    };

    return FreeSwitchParser;

  })();

  parse_header_text = function(header_text) {
    var header_lines, headers, line, name, _fn, _i, _len, _ref;
    if (typeof debug === "function") {
      debug("parse_header_text(" + header_text + ")");
    }
    header_lines = header_text.split("\n");
    headers = {};
    _fn = function(line) {
      var name, value, _ref;
      _ref = line.split(/: /, 2), name = _ref[0], value = _ref[1];
      return headers[name] = value;
    };
    for (_i = 0, _len = header_lines.length; _i < _len; _i++) {
      line = header_lines[_i];
      _fn(line);
    }
    if (((_ref = headers['Reply-Text']) != null ? _ref[0] : void 0) === '%') {
      for (name in headers) {
        headers[name] = querystring.unescape(headers[name]);
      }
    }
    return headers;
  };

}).call(this);
