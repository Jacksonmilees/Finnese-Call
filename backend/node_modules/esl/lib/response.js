(function() {
  var FreeSwitchResponse, Q, debug, util,
    __slice = [].slice;

  Q = require('q');

  exports.debug = false;

  if (exports.debug) {
    util = require('util');
    debug = function(o) {
      return util.log(util.inspect(o));
    };
  }

  module.exports = FreeSwitchResponse = (function() {
    function FreeSwitchResponse(socket) {
      this.socket = socket;
    }

    FreeSwitchResponse.prototype.trace = function(logger) {
      if (logger === true) {
        util = require('util');
        this._trace = function(o) {
          return util.log(util.inspect(o));
        };
        return;
      }
      if (logger === false) {
        delete this._trace;
        return;
      }
      if (typeof logger === 'function') {
        this._trace = logger;
      }
      if (typeof logger === 'string') {
        util = require('util');
        return this._trace = function(o) {
          return util.log(logger + util.inspect(o));
        };
      }
    };

    FreeSwitchResponse.prototype.once = function(event) {
      var deferred,
        _this = this;
      deferred = Q.defer();
      this.socket.once(event, function(call) {
        if (typeof _this._trace === "function") {
          _this._trace({
            event: event,
            headers: call.headers,
            body: call.body
          });
        }
        return deferred.resolve(call);
      });
      return deferred.promise;
    };

    FreeSwitchResponse.prototype.send = function(command, args) {
      var deferred, e, key, value;
      deferred = Q.defer();
      this.once('freeswitch_command_reply').then(function(call) {
        var reply;
        if (typeof debug === "function") {
          debug({
            when: 'command reply',
            command: command,
            args: args,
            call: call
          });
        }
        reply = call.headers['Reply-Text'];
        if (reply.match(/^-ERR/)) {
          if (typeof debug === "function") {
            debug({
              when: 'api response failed',
              reply: reply
            });
          }
          return deferred.reject(new Error(reply));
        } else {
          return deferred.resolve(call);
        }
      });
      if (typeof this._trace === "function") {
        this._trace({
          command: command,
          args: args
        });
      }
      try {
        this.socket.write("" + command + "\n");
        if (args != null) {
          for (key in args) {
            value = args[key];
            this.socket.write("" + key + ": " + value + "\n");
          }
        }
        this.socket.write("\n");
      } catch (_error) {
        e = _error;
        deferred.reject(e);
        this.socket.emit('freeswitch_error', {
          error: e
        });
      }
      return deferred.promise;
    };

    FreeSwitchResponse.prototype.end = function() {
      if (typeof debug === "function") {
        debug({
          when: 'end'
        });
      }
      this.socket.end();
      return this;
    };

    FreeSwitchResponse.prototype.api = function(command) {
      var deferred;
      if (typeof debug === "function") {
        debug({
          when: 'api',
          command: command
        });
      }
      deferred = Q.defer();
      this.once('freeswitch_api_response').then(function(call) {
        var reply;
        if (typeof debug === "function") {
          debug({
            when: 'api response',
            command: command,
            call: call
          });
        }
        reply = call.body;
        if (reply.match(/^-ERR/)) {
          if (typeof debug === "function") {
            debug({
              when: 'api response failed',
              reply: reply
            });
          }
          return deferred.reject(new Error(reply));
        } else {
          return deferred.resolve(call);
        }
      });
      this.send("api " + command);
      return deferred.promise;
    };

    FreeSwitchResponse.prototype.bgapi = function(command, cb) {
      return this.send("bgapi " + command, function(res) {
        var r, _ref;
        r = (_ref = res.headers['Reply-Text']) != null ? _ref.match(/\+OK Job-UUID: (.+)$/) : void 0;
        return typeof cb === "function" ? cb(r[1]) : void 0;
      });
    };

    FreeSwitchResponse.prototype.event_json = function() {
      var events;
      events = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.send("event json " + (events.join(' ')));
    };

    FreeSwitchResponse.prototype.nixevent = function() {
      var events;
      events = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.send("nixevent " + (events.join(' ')));
    };

    FreeSwitchResponse.prototype.noevents = function() {
      return this.send("noevents");
    };

    FreeSwitchResponse.prototype.filter = function(header, value) {
      return this.send("filter " + header + " " + value);
    };

    FreeSwitchResponse.prototype.filter_delete = function(header, value) {
      if (value != null) {
        return this.send("filter delete " + header + " " + value);
      } else {
        return this.send("filter delete " + header);
      }
    };

    FreeSwitchResponse.prototype.sendevent = function(event_name, args) {
      return this.send("sendevent " + event_name, args);
    };

    FreeSwitchResponse.prototype.auth = function(password) {
      return this.send("auth " + password);
    };

    FreeSwitchResponse.prototype.connect = function(cb) {
      return this.send("connect");
    };

    FreeSwitchResponse.prototype.linger = function(cb) {
      return this.send("linger");
    };

    FreeSwitchResponse.prototype.exit = function(cb) {
      return this.send("exit");
    };

    FreeSwitchResponse.prototype.log = function(level) {
      if (level != null) {
        return this.send("log " + level);
      } else {
        return this.send("log");
      }
    };

    FreeSwitchResponse.prototype.nolog = function(cb) {
      return this.send("nolog");
    };

    FreeSwitchResponse.prototype.sendmsg_uuid = function(uuid, command, args) {
      var execute_text, options;
      options = args != null ? args : {};
      options['call-command'] = command;
      execute_text = uuid != null ? "sendmsg " + uuid : 'sendmsg';
      return this.send(execute_text, options);
    };

    FreeSwitchResponse.prototype.sendmsg = function(command, args) {
      return this.sendmsg_uuid(null, command, args);
    };

    FreeSwitchResponse.prototype.execute_uuid = function(uuid, app_name, app_arg) {
      var options;
      options = {
        'execute-app-name': app_name,
        'execute-app-arg': app_arg
      };
      return this.sendmsg_uuid(uuid, 'execute', options);
    };

    FreeSwitchResponse.prototype.command_uuid = function(uuid, app_name, app_arg) {
      var event, result;
      event = "CHANNEL_EXECUTE_COMPLETE " + app_name + " " + app_arg;
      result = this.once(event);
      this.execute_uuid(uuid, app_name, app_arg);
      return result;
    };

    FreeSwitchResponse.prototype.hangup_uuid = function(uuid, hangup_cause) {
      var options;
      if (hangup_cause == null) {
        hangup_cause = 'NORMAL_UNSPECIFIED';
      }
      options = {
        'hangup-cause': hangup_cause
      };
      return this.sendmsg_uuid(uuid, 'hangup', options);
    };

    FreeSwitchResponse.prototype.unicast_uuid = function(uuid, args) {
      return this.sendmsg_uuid(uuid, 'unicast', args);
    };

    FreeSwitchResponse.prototype.execute = function(app_name, app_arg) {
      return this.execute_uuid(null, app_name, app_arg);
    };

    FreeSwitchResponse.prototype.command = function(app_name, app_arg) {
      return this.command_uuid(null, app_name, app_arg);
    };

    FreeSwitchResponse.prototype.hangup = function(hangup_cause) {
      return this.hangup_uuid(null, hangup_cause);
    };

    FreeSwitchResponse.prototype.unicast = function(args) {
      return this.unicast_uuid(null, args);
    };

    FreeSwitchResponse.prototype.auto_cleanup = function() {
      this.once('freeswitch_disconnect_notice').then(function(call) {
        if (typeof debug === "function") {
          debug("Received ESL disconnection notice");
        }
        switch (call.headers['Content-Disposition']) {
          case 'linger':
            if (typeof debug === "function") {
              debug("Sending freeswitch_linger");
            }
            return call.socket.emit('freeswitch_linger', call);
          case 'disconnect':
            if (typeof debug === "function") {
              debug("Sending freeswitch_disconnect");
            }
            return call.socket.emit('freeswitch_disconnect', call);
        }
      });
      this.once('freeswitch_linger').then(function(call) {
        if (typeof debug === "function") {
          debug({
            when: 'auto_cleanup/linger: exit'
          });
        }
        return call.exit();
      });
      this.once('freeswitch_disconnect').then(function(call) {
        if (typeof debug === "function") {
          debug({
            when: 'auto_cleanup/disconnect: end'
          });
        }
        return call.end();
      });
      return this;
    };

    FreeSwitchResponse.prototype.sequence = function(steps) {
      var call;
      call = this;
      steps = steps.map(function(f) {
        return function(call) {
          var _ref;
          return (_ref = f.apply(call)) != null ? _ref : call;
        };
      });
      return steps.reduce(Q.when, Q.resolve(call));
    };

    return FreeSwitchResponse;

  })();

}).call(this);
